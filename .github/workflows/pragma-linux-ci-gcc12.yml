name: Build Linux (gcc12)
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: environment-lin-gcc12-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write

env:
  GIT_CLONE_PROTECTION_ACTIVE: 'false'

jobs:
  build:
    name: Build - ${{ matrix.config.os }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - os: ubuntu-22.04
            name: "Ubuntu 22.04"
    steps:

      
      - name: setup gcc-11
        run: |
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-11 11 --slave /usr/bin/g++ g++ /usr/bin/g++-11 --slave /usr/bin/gcov gcov /usr/bin/gcov-11
      - name: Setup Pragma
        uses: Silverlan/pragma/github_actions/setup@main
        with:
          clone_url: "https://github.com/${{ github.repository }}.git"


      - name: Clone pr_source repo
        uses: GuillaumeFalourd/clone-github-repo-action@main
        with:
          owner: 'Slaweknowy'
          branch: master
          repository: 'pr_source'
          submodule: true
          access-token: ${{ secrets.PR_SOURCE_REPO_TOKEN }}
      
      - name: Move repo to target location
        run: |
            mv pr_source/ pr_mount_external/ && s|
            mv pr_mount_external ./pragma/modules/
            
      - name: Add dependencies
        run: |
            apt install python3 build-essential libssl-dev |
            add-apt-repository ppa:savoury1/llvm-defaults-14 |
            apt update |
            apt install |
            apt -qq install -y libwayland-dev libxrandr-dev |
            apt install libstdc++-12-dev libstdc++6 patchelf libxcb-keysyms1-dev xcb libxcb-xkb-dev x11-xkb-utils libx11-xcb-dev libxkbcommon-x11-dev xorg-dev git-lfs subversion |
            apt install meson cmake curl zip unzip tar python3-distutils pkg-config libfreetype-dev ninja-build

      - name: Build Pragma
        uses: ./pragma/github_actions/build
        id: build-pragma
        with:
          build-args: "--with-pfm --with-all-pfm-modules --with-vr --with-networking --no-libssl --with-lua-debugger=0 --c-compiler=clang-15 --cxx-compiler=clang++-15 --no-sudo"

          
      - name: "Actually patch libraries we're about to pack"
        run: |
          bash ./pragma/build_scripts/cmake/patch_libraries.sh ${{ steps.build-pragma.outputs.install-dir }}
          
      - name: Create Release Archive
        shell: bash
        run: |
          curDir="$PWD"
          # Add info file
          cd "${{ steps.build-pragma.outputs.install-dir }}"
          echo -e "ref: $GITHUB_REF \ncommit: $GITHUB_SHA\nbuild: $(date +"%Y-%m-%dT%H:%M:%SZ")" \
          > ./git_info.txt

          # Delete .git folders
          find . -name ".git*" -exec rm -R {} \; 2>/dev/null || true

          # Enable experimental updates
          cd cfg
          echo "pfm_enable_experimental_updates \"1\"" >> client.cfg
          cd ..

          tar -czvf pragma-lin64-gcc12.tar.gz *
          mv "${{ steps.build-pragma.outputs.install-dir }}/pragma-lin64-gcc12.tar.gz" "$curDir/"

      - name: Generate nightly tag description
        shell: bash
        run:   |
          curDate=$(date -u '+%Y-%m-%d %H:%M:%S %Z')
          printf "This is an auto-generated pre-release, built from the latest version of the source code.\nIt includes all files necessary to run Pragma, as well as the latest version of the Pragma Filmmaker, however functionality and stability are **not** guaranteed.\n\nLatest release date: $curDate" > tag_text.txt

      - name: Update nightly tag description
        uses: softprops/action-gh-release@v0.1.15
        with:
          body_path: tag_text.txt
          tag_name: nightly
          prerelease: true

      - name: Update nightly release
        uses: pyTooling/Actions/releaser/composite@main
        with:
          tag: nightly
          token: ${{ secrets.GITHUB_TOKEN }}
          files: "pragma-lin64-gcc12.tar.gz"
          
      # Tests are currently not functional on Linux GitHub runners
      #- name: Run Tests
      #  uses: ./pragma/github_actions/run_tests
      #  timeout-minutes: 10
      #  with:
      #    install-dir: "${{ steps.build-pragma.outputs.install-dir }}"

      - name: Generate File Lists
        shell: bash
        if: always()
        run: |
          curDir=$(pwd)

          if [ -d "pragma/build" ]; then
            cd pragma/build
            sudo tree --dirsfirst > "$curDir/files_pragma_build.txt"
            cd "$curDir"
          fi
          if [ -d "pragma/deps" ]; then
            cd pragma/deps
            sudo tree --dirsfirst > "$curDir/files_pragma_deps.txt"
            cd "$curDir"
          fi
          if [ -d "pragma/build/install" ]; then
            cd pragma/build/install
            sudo tree --dirsfirst > "$curDir/files_pragma_install.txt"
            cd "$curDir"
          fi

          mkdir artifacts
          cp -u "pragma/build/CMakeCache.txt" artifacts/
          cp -u "files_pragma_build.txt" artifacts/
          cp -u "files_pragma_deps.txt" artifacts/
          cp -u "files_pragma_install.txt" artifacts/

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: Artifacts
          overwrite: true
          path: "artifacts"

      - name: Handle Error
        uses: Silverlan/common_actions/action_handle_error@main
        if: failure()
